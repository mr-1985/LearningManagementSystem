@using Lms.DataLayer.Entities
@model IEnumerable<Lms.Core.ViewModels.ShowCourseListItemViewModel>

@{
    ViewData["Title"] = "Archive";
    List<CourseGroup> groups = ViewBag.Groups as List<CourseGroup>;
    List<int> selected = ViewBag.selectedGroups as List<int>;
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

<div class="container">
    <nav aria-label="breadcrumb">
        <ul class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">صفحه اصلی</a></li>
            <li class="breadcrumb-item active"><a href="/Course">دوره ها</a></li>
            <li class="breadcrumb-item active" aria-current="page"> برنامه نویسی </li>
        </ul>
    </nav>
</div>

<div class="container">
    <form id="formFilter" action="/Course" method="get">
        <input type="hidden" id="pageid" name="pageId" value="@ViewBag.pageId.ToString()" />
        <section class="term-categories">

            <div class="top-bar">

                <header>
                    <h1> دوره های <span> برنامه نویسی وب </span> </h1> <span> @Model.Count() دوره </span>
                </header>

                <div class="row">
                    <div class="col-md-4 col-sm-12 col-xs-12 pull-right">
                        <div class="input">
                            <input type="text" name="filter" placeholder="موضوع مورد نظر ...">
                            <button><i class="zmdi zmdi-search"></i></button>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 col-xs-12 pull-right">
                        <div class="switch-field available">
                            <input id="available-filter-1" name="getType" value="all" checked="" type="radio">
                            <label for="available-filter-1"> همه </label>
                            <input id="available-filter-2" name="getType" value="buy" type="radio">
                            <label for="available-filter-2"> خریدنی </label>
                            <input id="available-filter-3" name="getType" value="free" type="radio">
                            <label for="available-filter-3"> رایگان </label>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 col-xs-12 pull-left">
                        <div class="select-ddl">
                            <select name="orderByType">
                                <option value="date"> تاریخ انتشار </option>
                                <option value="updatedate"> تاریخ بروز رسانی </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <aside class="col-lg-3 col-md-4 col-sm-12 col-xs-12">

                    <section class="aside-section filter-by-price">
                        <header>
                            <h3> فیلتر بر اساس قیمت </h3>
                        </header>
                        <div class="price-range">
                            <input type="hidden" value="" id="min-value" name="startPrice">
                            <input type="hidden" value="" id="max-value" name="endPrice">
                            <div class="price-bar">
                                <div id="priceFilter"></div>
                            </div>
                            <div class="max-price">تا <span id="max-text">500000</span> تومان</div>
                            <div class="min-price">از <span id="min-text">20000</span> تومان</div>
                            <div class="clearfix"></div>
                        </div>
                    </section>

                    <section class="aside-section filter-by-category">
                        <header>
                            <h3> دسته بندی موضوعات </h3>
                        </header>
                        <div class="inner">
                            <ul>
                                @foreach (var group in groups.Where(g => g.ParentId == null))
                                {
                                    <li>
                                        <input onchange="changeGroup()" type="checkbox" @((selected.Any(s => s == group.GroupId) ? "checked" : "")) name="selectedGroups" value="@group.GroupId" id="cat-1">
                                        <label for="cat-1"> @group.GroupTitle </label>
                                        @if (groups.Any(g => g.ParentId == group.GroupId))
                                        {
                                            <ul>
                                                @foreach (var sub in groups.Where(g => g.ParentId == group.GroupId))
                                                {
                                                    <li>
                                                        <input onchange="changeGroup()" @((selected.Any(s => s == sub.GroupId) ? "checked" : "")) type="checkbox" name="selectedGroups" value="@sub.GroupId" id="cat-1">
                                                        <label for="cat-1"> @sub.GroupTitle </label>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    </section>
                </aside>

                <div class="col-lg-9 col-md-8 col-sm-12 col-xs-12">
                    <section class="terms-items">
                        <div class="row">
                            @foreach (var item in Model)
                            {
                                <partial name="_BoxCourse" model="@item" />
                            }
                        </div>
                        @{
                            int totalItems = ViewBag.TotalItems;
                            int currentPage = ViewBag.currentPage;
                            int pageSize = 10;
                            int maxPages = 10;
                            int startPage, endPage;
                            var totalPages = ViewBag.PageCount;
                        }

                        @if (totalPages <= maxPages)
                        {
                            // total pages less than max so show all pages
                            startPage = 1;
                            endPage = totalPages;
                        }
                        else
                        {
                            // total pages more than max so calculate start and end pages
                            var maxPagesBeforeCurrentPage = (int)Math.Floor((decimal)maxPages / (decimal)2);
                            var maxPagesAfterCurrentPage = (int)Math.Ceiling((decimal)maxPages / (decimal)2) - 1;

                            if (currentPage <= maxPagesBeforeCurrentPage)
                            {
                                // current page near the start
                                startPage = 1;
                                endPage = maxPages;
                            }
                            else if (currentPage + maxPagesAfterCurrentPage >= totalPages)
                            {
                                // current page near the end
                                startPage = totalPages - maxPages + 1;
                                endPage = totalPages;
                            }
                            else
                            {
                                // current page somewhere in the middle
                                startPage = currentPage - maxPagesBeforeCurrentPage;
                                endPage = currentPage + maxPagesAfterCurrentPage;
                            }
                        }
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                @if (ViewBag.currentPage > 1)
                                {
                                    <a class="btn btn-default" href="/Course?pageId=@(ViewBag.currentPage - 1)">قبلی</a>

                                    @*<a class="btn btn-default" href="/Course?pageId=1">اولین صفحه</a>*@
                                }

                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    <a href="/Course?pageId=@i" class="btn btn-default @((i==ViewBag.currentPage)? "btn btn-info" : "")">@i</a>
                                }

                                @if (ViewBag.currentPage < ViewBag.PageCount)
                                {
                                    <a class="btn btn-default" href="/Course?pageId=@(ViewBag.currentPage + 1)">بعدی</a>

                                    @*<a class="btn btn-default" href="/Course?pageId=@ViewBag.PageCount">اخرین صفحه</a>*@
                                }
                            </ul>
                        </nav>
                    </section>
                </div>
            </div>
        </section>
    </form>
</div>

@section Scripts{
    <script src="/HomePage/css/css/noUiSlider/nouislider.min.js"></script>
    <script src="/HomePage/css/css/js/script.js"></script>

    <script type="text/javascript">

        function changePage(pageid) {
            $("#pageid").val(pageid);
            $("#formFilter").submit();
        }

        $(function () {

            var slider = document.getElementById('priceFilter');
            noUiSlider.create(slider,
                {
                    start: [20000, 100000],
                    step: 5000,
                    connect: true,
                    direction: 'rtl',
                    range: {
                        'min': 20000,
                        'max': 100000
                    }
                });

            var marginMin = document.getElementById('min-text'),
                marginMax = document.getElementById('max-text');

            slider.noUiSlider.on('update',
                function (values, handle) {
                    var xvalue = Math.round(values[handle]);
                    if (handle) {
                        marginMax.innerHTML = xvalue;
                    } else {
                        marginMin.innerHTML = xvalue;
                    }
                    //console.log(values[handle]);
                });

            slider.noUiSlider.on('change',
                function (values, handle) {
                    var xvalue = Math.round(values[handle]);
                    if (handle) {
                        // setGetParameter('max_price', xvalue);
                        $('#max-value').val(xvalue);
                    } else {
                        // setGetParameter('min_price', xvalue);
                        $('#min-value').val(xvalue);
                    }
                });


            slider.noUiSlider.on('slide',
                function (values, handle) {

                    //console.log(values[0]);
                    //console.log(values[1]);

                    var xvalue = Math.round(values[handle]);
                    //updateSliderRange( Math.round(values[0]), Math.round(values[1]) );
                });

            function updateSliderRange(min, max) {
                slider.noUiSlider.updateOptions({
                    range: {
                        'min': min,
                        'max': max
                    }
                });
            }
        });

        function changeGroup() {
            $("#formFilter").submit();
        }
    </script>
}

